name: Create Release
on:
  push:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v1
        
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.0.100
          
      - name: Build Release
        id: build_release
        run: |
          NEC_VERSION_FILE=${{ github.workspace }}/necromancy.version
          NEC_VERSION=$(<"$VERSION_FILE")
          echo 'NEC_VERSION=$NEC_VERSION' >> $GITHUB_ENV
          echo 'NEC_VERSION_E=$(echo ${GITHUB_SHA | cut -c1-8)}' >> $GITHUB_ENV
          mkdir ./release
          for NEC_RUNTIME in win-x86 win-x64 linux-x64 osx-x64; do
              # Server
              dotnet publish Necromancy.Cli/Necromancy.Cli.csproj /p:Version=$NEC_VERSION /p:FromMSBuild=true --runtime $NEC_RUNTIME --configuration Release --output ./publish/$NEC_RUNTIME-$NEC_VERSION/Server
              # ReleaseFiles
              cp -r ./ReleaseFiles/. ./publish/$NEC_RUNTIME-$NEC_VERSION/
              # Pack
              tar cjf ./release/$NEC_RUNTIME-$NEC_VERSION.tar.gz ./publish/$NEC_RUNTIME-$NEC_VERSION
          done
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ env.NEC_VERSION }}-${{ env.NEC_VERSION_E }}
          release_name: Release ${{ env.NEC_VERSION }}-${{ env.NEC_VERSION_E }}
          draft: false
          prerelease: false

      - name: Upload win-x86 Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/win-x86-${{ env.NEC_VERSION }}.tar.gz
          asset_name: win-x86-${{ env.NEC_VERSION }}-${{ env.NEC_VERSION_E }}.tar.gz
          asset_content_type: application/gzip
          
      - name: Upload win-x64 Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/win-x64-${{ env.NEC_VERSION }}.tar.gz
          asset_name: win-x64-${{ env.NEC_VERSION }}-${{ env.NEC_VERSION_E }}.tar.gz
          asset_content_type: application/gzip
          
      - name: Upload linux-x64 Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/linux-x64-${{ env.NEC_VERSION }}.tar.gz
          asset_name: linux-x64-${{ env.NEC_VERSION }}-${{ env.NEC_VERSION_E }}.tar.gz
          asset_content_type: application/gzip
          
      - name: Upload osx-x64 Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/osx-x64-${{ env.NEC_VERSION }}.tar.gz
          asset_name: osx-x64-${{ env.NEC_VERSION }}-${{ env.NEC_VERSION_E }}.tar.gz
          asset_content_type: application/gzip
